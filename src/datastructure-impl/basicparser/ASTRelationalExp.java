package basicparser;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.LinkedList;

import basicparser.ASTMult.Type;

/* Generated By:JJTree: Do not edit this line. ASTRelationalExp.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=BaseNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTRelationalExp extends SimpleNode {
	public LinkedList<Type> typeList = new LinkedList<Type>();

	public ASTRelationalExp(int id) {
		super(id);
	}

	public ASTRelationalExp(BasicParserGEN p, int id) {
		super(p, id);
	}

	/**
	 * Accept the visitor. *
	 */
	public Object jjtAccept(BasicParserGENVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	/* JavaCC - OriginalChecksum=1511c7448ea540cb51ed6c8013aeea1f (do not edit this line) */
	public static enum Type {
		Greater(">", ">"),
		Lesser("<", "<"),
		GreaterEqual(">=", ">="),
		LesserEqual("<=", "<="),
		Unequal("<>", "!=");

		private String identity;
		private String javaIdentity;

		Type(String identity, String javaIdentity) {
			this.identity = identity;
			this.javaIdentity = javaIdentity;
		}

		public String getIdentity() {
			return identity;
		}

		public String getJavaIdentity() {
			return javaIdentity;
		}

		public static Type fromIdentity(String s) {
			if(Greater.getIdentity().equals(s)) {
				return Greater;
			}
			else if(Lesser.getIdentity().equals(s)) {
				return Lesser;
			}
			else if(GreaterEqual.getIdentity().equals(s)) {
				return GreaterEqual;
			}
			else if(LesserEqual.getIdentity().equals(s)) {
				return LesserEqual;
			}
			else if(Unequal.getIdentity().equals(s)) {
				return Unequal;
			}
			throw new RuntimeException("Unknown identity " + s);
		}
	}
}
