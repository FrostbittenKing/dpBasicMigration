PARSER_BEGIN(BasicParser)

/** Simple brace matcher. */
public class BasicParser {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    BasicParser parser = new BasicParser(System.in);
    parser.parseRoot();
  }

}

PARSER_END(BasicParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /* BASIC LANGUAGE RESERVED WORDS */
{
 	<FOR: "for" | "FOR">
| 	<GOTO: "goto" | "GOTO">
| 	<IF: "if" | "IF">
| 	<NEXT: "next" | "NEXT">
| 	<PRINT: "?" | "print" | "PRINT">
| 	<STEP: "step" | "STEP"> 
| 	<THEN: "then" | "THEN">
| 	<TO: "to" | "TO"> 	
}

TOKEN: /* LITERALS */
{
	<NUM: ( ["0"-"9"] )+>
/*|	<EXPRESSION: [ */
/*| <VAR: "*"+> */
}

/** Root production. */
void parseRoot():
{}
{
	(parseCommand())* <EOF>
}

void parseCommand():
{}
{
	<NUM> (ifStatement() | gotoStatement() | forLoopStatement() | printStatement())
}

/* TODO: missing boolean expression literal */
void ifStatement():
{}
{
	<IF> /*expression*/ ifThenStatement() | ifGotoStatement()
}

void ifThenStatement():
{}
{
	<NUM> <THEN> parseCommand()
}

void ifGotoStatement():
{}
{
	<NUM> gotoStatement()
}

void gotoStatement() :
{}
{
	<GOTO> <NUM>
}

/* TODO: missing variable literal, embedded commands because it expects at least one command for some reason */ 
void forLoopStatement() :
{}
{
	<FOR> /*var*/ <NUM> <TO> <NUM> (<STEP> <NUM>)?
  /*  (parseCommand())* */
	<NUM> <NEXT> /*var*/
}

/* TODO: missing text literal */
void printStatement() :
{}
{
	<PRINT> /*text*/
}