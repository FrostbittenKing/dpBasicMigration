PARSER_BEGIN(BasicParser)

/** Simple brace matcher. */
public class BasicParser {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    BasicParser parser = new BasicParser(System.in);
    parser.parseRoot();
  }

}

PARSER_END(BasicParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /* BASIC LANGUAGE RESERVED WORDS */
{
	<BRIGHT: "bright" | "BRIGHT">
|	<CLEAR:  "clear"  | "CLEAR">
|	<CLOAD:	 "cload" | "CLOAD">
|	<CLOAD*: "cload*" | "CLOAD*">
|	<CLOADA: "cloada" | "CLOADA">
|	<CLOAD?: "cload?" | "CLOAD?">
|	<CONT: "cont" | "CONT">
|	<CURSORX: "cursorx" | "CURSORX">
|	<CURSORY: "cursory" | "CURSORY">
|	<CSAVE: "csave" | "CSAVE">
|	<CSAVEM: "csavem" | "CSAVEM">
|	<CSAVEL: "csavel" | "CSAVEL">
|	<CSAVES: "csaves" | "CSAVES">
|	<CSAVE*: "csave*" | "CSAVE*">
|	<CSAVEX: "csavex" | "CSAVEX">
|	<DATA:	 "data" | "DATA">
|	<DELIM:	 "delim" | "DELIM">
|	<DIM: "dim" | "DIM">
|	<DISPLAY: "display | "DISPLAY">
|	<END: "end" | "END">
| 	<FOR: "for" | "FOR">
|	<GOSUB: "gosub" | "GOSUB">
| 	<GOTO: "goto" | "GOTO">
|	<GR: "gr" | "GR">
| 	<IF: "if" | "IF">
|	<INIT: "init" | "INIT">
|	<INPUT: "input" | "INPUT">
|	<LET:	"let" | "LET">
|	<LINE:	"line" | "LINE">
|	<LIST:	"list" | "LIST">
|	<NEW:	"new" | "NEW">
| 	<NEXT: "next" | "NEXT">
|	<ON:   "on" | "ON">
|	<PAGE: "page" | "PAGE">
|	<POKE: "poke" | "POKE">
| 	<PRINT: "?" | "print" | "PRINT">
|	<READ:	"read" | "READ">
|	<REM:	"rem" | "REM">
|	<RESTORE:     "restore" | "RESTORE">
|	<RETURN: "return" | "RETURN">
|	<RUN:	 "run" | "RUN">
|	<SCREEN: "screen" | "SCREEN">
|	<SCROLL: "scroll" | "SCROLL">
|	<SOUND: "sound" | "SOUND">
| 	<STEP: "step" | "STEP"> 
|	<STOP: "stop" | "STOP">
|	<STORE: "store" | "STORE">
| 	<THEN: "then" | "THEN">
| 	<TO: "to" | "TO"> 	
|	<TX: "tx" | "TX">
}

TOKEN: /* LITERALS */
{
	<NUM: ( ["0"-"9"] )+>
/*|	<EXPRESSION: [ */
/*| <VAR: "*"+> */
}

/** Root production. */
void parseRoot():
{}
{
	(parseCommand())* <EOF>
}

void parseCommand():
{}
{
	<NUM> (ifStatement() | gotoStatement() | forLoopStatement() | printStatement())
}

/* TODO: missing boolean expression literal */
void ifStatement():
{}
{
	<IF> /*expression*/ ifThenStatement() | ifGotoStatement()
}

void ifThenStatement():
{}
{
	<NUM> <THEN> parseCommand()
}

void ifGotoStatement():
{}
{
	<NUM> gotoStatement()
}

void gotoStatement() :
{}
{
	<GOTO> <NUM>
}

/* TODO: missing variable literal, embedded commands because it expects at least one command for some reason */ 
void forLoopStatement() :
{}
{
	<FOR> /*var*/ <NUM> <TO> <NUM> (<STEP> <NUM>)?
  /*  (parseCommand())* */
	<NUM> <NEXT> /*var*/
}

/* TODO: missing text literal */
void printStatement() :
{}
{
	<PRINT> /*text*/
}